{"version":3,"sources":["mplBurnNft.ts","burner.ts","Header.tsx","RedeemButton.tsx","Redeemer.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.tsx"],"names":["BurnNftStruct","beet","MAX_TOKEN_BURNS_PER_TRANSACTION","createBurnInstructionsForToken","owner","tokenMetas","masterEditionAccount","createBurnNFTInstruction","instructions","amount","burnInstruction","splToken","createBurnInstruction","mint","tokenAccount","push","closeInstruction","createCloseAccountInstruction","createBurnSPLInstructions","binstr","accounts","programId","web3","serialize","instructionDiscriminator","data","keys","pubkey","metadata","isWritable","isSigner","splTokenProgram","collectionMetadata","createBurnNftInstruction","metadataAccount","collectionMetadataAccount","TOKEN_METADATA_PROGRAM_ID","getRedeemableLamports","tokenAccountLamports","masterEditionAccountLamports","metadataAccountLamports","createBurnTransactions","donationPercentage","donationAddress","a","transactions","remaining","transaction","sweb3","claimableLamports","i","nextToken","pop","forEach","ix","add","donationAmount","Math","floor","donationInstruction","transfer","fromPubkey","toPubkey","lamports","length","Header","selectionModel","txcnt","ceil","Grid","container","direction","justifyContent","wrap","Typography","variant","color","style","fontWeight","countNFTs","getPriceString","solForTokens","getSelectedTokens","price","toFixed","CTAButton","styled","Button","RedeemButton","onClick","useState","clicked","setClicked","disabled","CircularProgress","ConnectButton","WalletDialogButton","MainContainer","div","tokenMetaColumns","field","headerName","width","renderCell","cellValues","imagelink","row","imageUrl","src","alt","LAMPORTS_PER_SOL","adr","toBase58","Link","href","getSolscanLink","target","url","Redeemer","props","connection","setTokenMetas","open","message","severity","undefined","alertState","setAlertState","setSelectionModel","setDonationPercentage","wallet","useWallet","useEffect","publicKey","findTokenAccounts","updatedAccounts","onRedeem","selection","console","log","ta","sendTransaction","txid","confirmTransaction","res","value","err","toString","msg","trace","Container","marginTop","maxWidth","position","Paper","padding","backgroundColor","borderRadius","connected","Stack","spacing","alignItems","Slider","step","min","max","onChange","event","newValue","DataGrid","sx","border","autoHeight","rows","columns","checkboxSelection","onSelectionModelChange","Snackbar","autoHideDuration","onClose","Alert","theme","createTheme","palette","type","network","process","rpcHost","anchor","PublicKey","Connection","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","address","tokens","map","t","reduce","prev","curr","filter","getTokenAccountsByOwner","response","id","account","slice","populateMetadataInfo","getMetadataPDA","findProgramAddress","Buffer","from","toBuffer","pdaInfo","metadataPDA","getAccountInfo","metadataAccountInfo","nameBuffer","nameLenght","readUInt32LE","name","j","readUInt8","String","fromCharCode","urlBuffer","URL_OFFSET","urlLenght","extermalMetadataURI","fetchImageLink","collectionMint","getCollectionMintFromMetadataAccount","editionPdaInfo","editionPDA","masterEditionAccountInfo","creatorsPresent","creators","CREATOR_OFFSET","enOffset","tsOffset","collectionOffset","verifiedCollection","token","fetch","method","json","includes"],"mappings":"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","file":"static/js/main.678bfaa7.chunk.js","sourcesContent":["// taken from https://github.com/metaplex-foundation/metaplex-program-library/blob/master/token-metadata/js/src/generated/instructions/BurnNft.ts\r\n// because for some resason my import doesn't work \r\n\r\nimport * as beet from '@metaplex-foundation/beet';\r\nimport * as web3 from '@solana/web3.js';\r\n\r\n/**\r\n * @category Instructions\r\n * @category BurnNft\r\n * @category generated\r\n */\r\nexport const BurnNftStruct = new beet.BeetArgsStruct<{ instructionDiscriminator: number }>(\r\n  [['instructionDiscriminator', beet.u8]],\r\n  'BurnNftInstructionArgs',\r\n);\r\n/**\r\n * Accounts required by the _BurnNft_ instruction\r\n *\r\n * @property [_writable_] metadata Metadata (pda of ['metadata', program id, mint id])\r\n * @property [_writable_, **signer**] owner NFT owner\r\n * @property [_writable_] mint Mint of the NFT\r\n * @property [_writable_] tokenAccount Token account to close\r\n * @property [_writable_] masterEditionAccount MasterEdition2 of the NFT\r\n * @property [] splTokenProgram SPL Token Program\r\n * @property [_writable_] collectionMetadata (optional) Metadata of the Collection\r\n * @category Instructions\r\n * @category BurnNft\r\n * @category generated\r\n */\r\nexport type BurnNftInstructionAccounts = {\r\n  metadata: web3.PublicKey;\r\n  owner: web3.PublicKey;\r\n  mint: web3.PublicKey;\r\n  tokenAccount: web3.PublicKey;\r\n  masterEditionAccount: web3.PublicKey;\r\n  splTokenProgram: web3.PublicKey;\r\n  collectionMetadata?: web3.PublicKey;\r\n};\r\n\r\nexport const burnNftInstructionDiscriminator = 29;\r\n\r\n/**\r\n * Creates a _BurnNft_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @category Instructions\r\n * @category BurnNft\r\n * @category generated\r\n */\r\nexport function createBurnNftInstruction(\r\n  accounts: BurnNftInstructionAccounts,\r\n  programId = new web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'),\r\n) {\r\n  const [data] = BurnNftStruct.serialize({\r\n    instructionDiscriminator: burnNftInstructionDiscriminator,\r\n  });\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.metadata,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.owner,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.mint,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.masterEditionAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.splTokenProgram,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ];\r\n\r\n  if (accounts.collectionMetadata != null) {\r\n    keys.push({\r\n      pubkey: accounts.collectionMetadata,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  });\r\n  return ix;\r\n}","\r\n//import sweb3 = require('@solana/web3.js');\r\nimport * as sweb3 from '@solana/web3.js';\r\n//import * as anchor from \"@project-serum/anchor\";\r\n//import base58 = require('bs58');\r\n//import base58 from 'bs58';\r\n//import splToken = require('@solana/spl-token');\r\nimport * as splToken from '@solana/spl-token';\r\n//import {createBurnNftInstruction, PROGRAM_ID as TOKEN_METADATA_PROGRAM_ID} from \"@metaplex-foundation/mpl-token-metadata\"; // for some reason this fails\r\nimport { TokenMetas, TOKEN_METADATA_PROGRAM_ID } from './utils';\r\nimport { createBurnNftInstruction } from './mplBurnNft';\r\n\r\nexport const MAX_TOKEN_BURNS_PER_TRANSACTION = 6;\r\n\r\nfunction createBurnInstructionsForToken(owner: sweb3.PublicKey, tokenMetas: TokenMetas) : sweb3.TransactionInstruction[]{\r\n    if (tokenMetas.masterEditionAccount){\r\n        // this is an NFT\r\n        return [createBurnNFTInstruction(owner, tokenMetas)];\r\n    } else {\r\n        // regular SPL burn and close\r\n        return createBurnSPLInstructions(owner, tokenMetas);\r\n    }\r\n}\r\nfunction createBurnNFTInstruction(owner: sweb3.PublicKey, tokenMetas: TokenMetas) : sweb3.TransactionInstruction{\r\n    const brnAccounts = {\r\n        metadata: tokenMetas.metadataAccount!,\r\n        owner: owner,\r\n        mint: tokenMetas.mint,\r\n        tokenAccount: tokenMetas.tokenAccount,\r\n        masterEditionAccount: tokenMetas.masterEditionAccount!,\r\n        splTokenProgram: splToken.TOKEN_PROGRAM_ID,\r\n        collectionMetadata: tokenMetas.collectionMetadataAccount\r\n    };\r\n\r\n    const binstr = createBurnNftInstruction(brnAccounts, TOKEN_METADATA_PROGRAM_ID);\r\n    return binstr;\r\n}\r\n\r\n\r\nfunction createBurnSPLInstructions(owner: sweb3.PublicKey, tokenMetas: TokenMetas) : sweb3.TransactionInstruction[]{\r\n    const instructions :sweb3.TransactionInstruction[] = [];\r\n    if(tokenMetas.amount){\r\n        const burnInstruction = splToken.Token.createBurnInstruction(\r\n            splToken.TOKEN_PROGRAM_ID,\r\n            tokenMetas.mint,\r\n            tokenMetas.tokenAccount,\r\n            owner,\r\n            [],\r\n            tokenMetas.amount\r\n        );\r\n        instructions.push(burnInstruction);\r\n    }\r\n    const closeInstruction = splToken.Token.createCloseAccountInstruction(\r\n        splToken.TOKEN_PROGRAM_ID,\r\n        tokenMetas.tokenAccount,\r\n        owner,\r\n        owner,\r\n        []\r\n    );\r\n    instructions.push(closeInstruction);\r\n    return instructions;\r\n}\r\n\r\nexport function getRedeemableLamports(tokenMetas : TokenMetas) : number {\r\n    return tokenMetas.tokenAccountLamports + (tokenMetas.masterEditionAccountLamports ? tokenMetas.masterEditionAccountLamports + (tokenMetas.metadataAccountLamports ?? 0) :0)\r\n}\r\n\r\nexport async function createBurnTransactions(owner: sweb3.PublicKey, \r\n    tokenMetas: TokenMetas[], \r\n    donationPercentage?: number, donationAddress?: sweb3.PublicKey): Promise<sweb3.Transaction[]> {\r\n\r\n    let transactions: sweb3.Transaction[] = [];\r\n\r\n    let remaining = tokenMetas;\r\n    \r\n    while(remaining.length>0){\r\n        const transaction = new sweb3.Transaction();\r\n        let claimableLamports = 0;\r\n\r\n        // add close instructions\r\n        for (let i = 0; i < MAX_TOKEN_BURNS_PER_TRANSACTION; i++) {\r\n            const nextToken = remaining.pop();\r\n            if(!nextToken) break;\r\n            claimableLamports += getRedeemableLamports(nextToken);\r\n            const nextInstrs = createBurnInstructionsForToken(owner, nextToken);\r\n            nextInstrs.forEach(ix => transaction.add(ix));\r\n        }\r\n\r\n        // add donation instruction\r\n        if(donationAddress){ // we want to add this ix even if 0 percent\r\n            const donationAmount = Math.floor(claimableLamports * (donationPercentage??0)/100);\r\n            const donationInstruction = sweb3.SystemProgram.transfer({\r\n                fromPubkey: owner,\r\n                toPubkey: donationAddress,\r\n                lamports: donationAmount,\r\n            });\r\n            transaction.add(donationInstruction);\r\n        }\r\n\r\n\r\n        transactions.push(transaction);\r\n    }\r\n    return transactions;\r\n}\r\n","\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { GridSelectionModel } from '@mui/x-data-grid';\r\nimport { MAX_TOKEN_BURNS_PER_TRANSACTION, } from './burner';\r\nimport { TokenMetas, solForTokens, countNFTs, getSelectedTokens } from './utils';\r\n\r\ntype HeaderProps = {\r\n  tokenMetas?: TokenMetas[];\r\n  selectionModel?: GridSelectionModel;\r\n};\r\n\r\nexport const Header = ({ tokenMetas, selectionModel }: HeaderProps) => {\r\n  const txcnt = tokenMetas?Math.ceil(tokenMetas?.length / MAX_TOKEN_BURNS_PER_TRANSACTION):0;\r\n  return (\r\n    <Grid container direction=\"row\" justifyContent=\"center\" wrap=\"nowrap\">\r\n      <Grid container direction=\"row\" wrap=\"nowrap\">\r\n        {tokenMetas && (\r\n          <Grid container direction=\"row\" wrap=\"nowrap\">\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                NFTs\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{\r\n                  fontWeight: 'bold',\r\n                }}\r\n              >\r\n                {`${countNFTs(tokenMetas)} / ${tokenMetas?.length}`}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Your selection\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{ fontWeight: 'bold' }}\r\n              >\r\n                {getPriceString(selectionModel?solForTokens(getSelectedTokens(tokenMetas, selectionModel)):0)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                You can redeem\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{ fontWeight: 'bold' }}\r\n              >\r\n                {getPriceString(solForTokens(tokenMetas))}\r\n              </Typography>\r\n              {tokenMetas?.length > 0 && \r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                  in {`${txcnt}`} transaction{txcnt !== 1 && 's'}\r\n                </Typography> \r\n              }\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        \r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport const getPriceString = (price: number): string => {\r\n  return `◎ ${price.toFixed(3)}`;\r\n};\r\n","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport { TokenMetas } from './utils';\r\nimport { GridSelectionModel } from '@mui/x-data-grid';\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #ff0000 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const RedeemButton = ({\r\n  onClick,\r\n  tokenMetas,\r\n  selectionModel,\r\n}: {\r\n  onClick: () => Promise<void>;\r\n  tokenMetas?: TokenMetas[];\r\n  selectionModel?: GridSelectionModel;\r\n}) => {\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n\r\n  const getRedeemButtonContent = () => {\r\n    if (clicked) {\r\n      return <CircularProgress />;\r\n    } else if (tokenMetas?.length===0) {\r\n      return 'NOTHING TO BURN';\r\n    } else if (!selectionModel || selectionModel?.length===0) {\r\n      return 'SECECT TOKENS TO BURN';\r\n    }\r\n\r\n    return 'BURN SELECTION';\r\n  };\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={\r\n        clicked ||\r\n        tokenMetas?.length===0\r\n        ||\r\n        !selectionModel||\r\n        selectionModel?.length===0\r\n      }\r\n      onClick={async () => {\r\n        setClicked(true);\r\n        await onClick();\r\n        setClicked(false);\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getRedeemButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Container, Paper, Snackbar } from \"@material-ui/core\";\r\nimport styled from 'styled-components';\r\nimport Alert from \"@mui/material/Alert\";\r\nimport Slider from '@mui/material/Slider';\r\nimport Stack from '@mui/material/Stack';\r\nimport { DataGrid, GridColDef, GridSelectionModel } from '@mui/x-data-grid';\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\n// import { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport { getSolscanLink, getSelectedTokens, TokenMetas, findTokenAccounts } from \"./utils\"\r\nimport { createBurnTransactions, getRedeemableLamports} from \"./burner\";\r\nimport { getPriceString, Header } from \"./Header\";\r\nimport { RedeemButton } from \"./RedeemButton\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\nexport interface RedeemerProps {\r\n  connection: anchor.web3.Connection;\r\n  rpcHost: string;\r\n  donationAddress: anchor.web3.PublicKey;\r\n}\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MainContainer = styled.div``; // add your owns styles here\r\n\r\nconst tokenMetaColumns: GridColDef[] = [\r\n  { field: 'id', headerName: 'image', width: 80,\r\n  renderCell: (cellValues) => {\r\n    const imagelink = cellValues.row.imageUrl;\r\n    return <img src={imagelink} alt=\"\" width={60}/>;\r\n  }} ,\r\n  { field: 'name', headerName: 'name', width: 150} ,\r\n  { field: 'amount', headerName: 'amount', width: 70} ,\r\n  // { field: 'tokenAccount', headerName: 'address', width: 400,\r\n  // renderCell: (cellValues) => {\r\n  //   const adr = cellValues.row.tokenAccount.toBase58();\r\n  //   return <Link href={getSolscanLink(adr)} target=\"_blank\">{adr}</Link>;\r\n  // } },\r\n  { field: 'tokenAccountLamports', headerName: 'reclaimable', width: 90, \r\n  renderCell: (cellValues) => {\r\n    const lamports = getRedeemableLamports(cellValues.row);\r\n    return getPriceString(lamports/LAMPORTS_PER_SOL);\r\n  }} ,\r\n  { field: 'mint', headerName: 'mint', width: 400,\r\n  renderCell: (cellValues) => {\r\n    const adr = cellValues.row.mint.toBase58();\r\n    return <Link href={getSolscanLink(adr)} target=\"_blank\">{adr}</Link>;\r\n  } },\r\n  { field: 'url', headerName: 'metadata', width: 400,\r\n  renderCell: (cellValues) => {\r\n    const adr = cellValues.row.url;\r\n    return <Link href={adr} target=\"_blank\">{adr}</Link>;\r\n  } },\r\n  //   valueGetter: (params: GridValueGetterParams) =>\r\n  //     `${params.row.firstName || ''} ${params.row.lastName || ''}`,\r\n  // },\r\n  \r\n  \r\n];\r\n\r\n\r\nconst Redeemer = (props: RedeemerProps) => {\r\n  const connection = props.connection;\r\n  //const [balance, setBalance] = useState<number>();\r\n  const [tokenMetas, setTokenMetas] = useState<TokenMetas[]>();\r\n  //const [emptyAccountInfos, setEmptyAccountInfos] = useState<EmptyAccountInfo[]>();\r\n  //const [showTable, setShowTable] = useState<boolean>(false);\r\n  //const [isInTransaction, setIsInTransaction] = useState(false); \r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n  const [selectionModel, setSelectionModel] = useState<GridSelectionModel>();\r\n  const [donationPercentage, setDonationPercentage] = useState<number>(2);\r\n\r\n  const handleDonationChange = (event: Event, newValue: number | number[]) => {\r\n    setDonationPercentage(newValue as number);\r\n  };\r\n\r\n  //const w2 = useWallet();\r\n  //const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n\r\n  // const anchorWallet = {\r\n  //   publicKey: wallet.publicKey,\r\n  //   signAllTransactions: wallet.signAllTransactions,\r\n  //   signTransaction: wallet.signTransaction,\r\n  // } as anchor.Wallet;\r\n\r\n  // const provider = new anchor.Provider(connection, anchorWallet, {\r\n  //   preflightCommitment: 'recent',\r\n  // });\r\n\r\n\r\n  const loadTokenAccounts = () => {\r\n    (async () => {\r\n      if (!wallet || !wallet.publicKey) return;\r\n      const updatedAccounts = await findTokenAccounts(connection,wallet.publicKey);\r\n      \r\n      setTokenMetas(updatedAccounts);\r\n      \r\n      \r\n    })();\r\n  };\r\n\r\n  // const enableTable = async () => {\r\n  //   if(!tokenMetas) return;\r\n  //   setShowTable(true);\r\n\r\n  //   const updateStateCallback = (data : EmptyAccountInfo[]) => {\r\n  //     setEmptyAccountInfos(undefined);setEmptyAccountInfos(data);}\r\n  //     const eaInfos = await getEmptyAccountInfos(connection, tokenMetas, updateStateCallback);\r\n  //     if (eaInfos) {\r\n  //       setEmptyAccountInfos(eaInfos);\r\n  //       const allIDs : number[] = eaInfos.map(ea=>ea.id);\r\n  //       setSelectionModel(allIDs); // select all\r\n  //     }\r\n\r\n  // }\r\n\r\n  useEffect(loadTokenAccounts, [\r\n    wallet,\r\n    connection\r\n  ]);\r\n\r\n  // useEffect(() => {\r\n  //   (async () => {\r\n  //     if (wallet && wallet.publicKey) {\r\n  //       const balance = await connection.getBalance(wallet.publicKey);\r\n  //       setBalance(balance / LAMPORTS_PER_SOL);\r\n  //     }\r\n  //   })();\r\n  // }, [wallet, connection]);\r\n\r\n  const onRedeem = async () => {\r\n    try {\r\n      //setIsInTransaction(true);\r\n      if (wallet && wallet.publicKey && tokenMetas && tokenMetas.length>0) {\r\n\r\n        let selection :TokenMetas[] = [];\r\n        if(selectionModel){\r\n          console.log(selectionModel.length+ \" tokens selected.\");\r\n          selection = getSelectedTokens(tokenMetas, selectionModel);\r\n          //console.log(selectedPKs.length+ \" accounts in queue.\");\r\n        }\r\n\r\n        const transactions = await createBurnTransactions(wallet.publicKey, selection, donationPercentage, props.donationAddress);\r\n        for (const ta of transactions){\r\n          const txid = await wallet.sendTransaction(ta,connection);\r\n          console.log(txid);\r\n          // const instrCnt = ta.instructions.length;\r\n\r\n          const res = await connection.confirmTransaction(txid, 'confirmed');\r\n          if(!res.value.err){\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Successfully burned and recovered some SOL!\",\r\n              severity: \"success\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: res.value.err.toString(),\r\n              severity: \"warning\",\r\n            });\r\n          }\r\n        }\r\n\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Burning failed!\";\r\n      console.trace();\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      // if (wallet && wallet.publicKey) {\r\n      //   const balance = await props.connection.getBalance(wallet.publicKey);\r\n      //   setBalance(balance / LAMPORTS_PER_SOL);\r\n      // }\r\n      //setIsInTransaction(false);\r\n      //loadEmptyAccounts();\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\r\n        <Paper\r\n          style={{ padding: 24, backgroundColor: '#151A1F', borderRadius: 6 }}\r\n        >\r\n          <h1>NFT Burner</h1>\r\n          {!wallet.connected ? (\r\n            <>\r\n            <p >Best practice: don't user your main wallet!<br/> use a burner wallet!</p>\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Header tokenMetas={tokenMetas} selectionModel={selectionModel}/>\r\n              <MainContainer>\r\n                <Stack spacing={2} direction=\"row\" alignItems=\"center\">\r\n                <p>Donate:</p>\r\n                <Slider aria-label=\"Donation Percentage\" step={1} min={0} max={100} onChange={handleDonationChange} color=\"secondary\"/>\r\n                <p>{donationPercentage}%</p>\r\n                \r\n                </Stack>\r\n                <p style={{color:\"red\"}}>Warning: this process is irreversible!</p>\r\n                  <RedeemButton\r\n                    tokenMetas={tokenMetas}\r\n                    selectionModel={selectionModel}\r\n                    onClick={onRedeem}\r\n                  />\r\n              </MainContainer>\r\n            </>\r\n          )}\r\n          <p style={{ color: \"gray\"}}>developed and maintained by solandy.sol</p>\r\n          <p style={{ color: \"gray\"}}>follow me on <a href=\"https://twitter.com/HeyAndyS\">Twitter</a> and <a href=\"https://www.youtube.com/channel/UCURIDSvXkuDf9XXe0wYnoRg\">YouTube</a></p>\r\n        </Paper>\r\n      </Container>\r\n      {wallet.connected && tokenMetas &&\r\n      tokenMetas.length>0 ?\r\n      <div style={{ width: '100%' }}>\r\n          <DataGrid sx={{\r\n              color: \"white\",\r\n              border: 2,\r\n            }}\r\n            autoHeight\r\n            rows={tokenMetas}\r\n            columns={tokenMetaColumns}\r\n            checkboxSelection\r\n            selectionModel={selectionModel}\r\n            onSelectionModelChange={setSelectionModel}\r\n          />\r\n      </div>\r\n      :<p>No tokens found.</p>}\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n\r\n    </Container>\r\n  );\r\n};\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nexport default Redeemer;\r\n","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\n\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\nimport Redeemer from './Redeemer';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst donationAddress = new anchor.web3.PublicKey(process.env.REACT_APP_DONATION_ADDRESS!);\r\nconst connection = new anchor.web3.Connection(rpcHost\r\n  ? rpcHost\r\n  : anchor.web3.clusterApiUrl('mainnet-beta'));\r\n\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Redeemer\r\n              connection={connection}\r\n              rpcHost={rpcHost}\r\n              donationAddress={donationAddress}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","\r\nimport * as sweb3 from '@solana/web3.js';\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { GridSelectionModel } from '@mui/x-data-grid';\r\nimport * as splToken from '@solana/spl-token';\r\nimport { getRedeemableLamports } from './burner';\r\n\r\n\r\n\r\n// export async function getEmptyAccountInfos(connection: sweb3.Connection, accounts: TokenMetas[], callback?: any) : Promise<EmptyAccountInfo[]> {\r\n//     const accList = accounts.map((acc , i) => {\r\n//         const adr =acc.tokenAccount.toBase58();\r\n//          return {account: acc, \r\n//             id: i, \r\n//             link:getSolscanLink(adr),\r\n//             lamports: acc.tokenAccountLamports\r\n//     }});\r\n\r\n//     //accList.forEach(element => populateMetadataInfo(connection, element));\r\n//     populateAll(connection, accList, callback);\r\n\r\n//     return accList;\r\n// }\r\n\r\n// async function populateAll(connection: sweb3.Connection, tokens: TokenMetas[]) {\r\n//     for(const t of tokens){\r\n//         await populateMetadataInfo(connection, t);\r\n//     }\r\n// }\r\n\r\nexport function getSolscanLink(address: string) : string {\r\n    return \"https://solscan.io/address/\"+address;\r\n}\r\n\r\nexport const TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n  );\r\n\r\n  \r\nexport interface TokenMetas {\r\n  id: number,\r\n  tokenAccount: sweb3.PublicKey;\r\n  tokenAccountLamports: number;\r\n  mint: sweb3.PublicKey;\r\n  amount: number;\r\n  metadataAccount?: sweb3.PublicKey;\r\n  metadataAccountLamports?: number;\r\n  masterEditionAccount?: sweb3.PublicKey;\r\n  masterEditionAccountLamports?: number;\r\n  collectionMetadataAccount?: sweb3.PublicKey;\r\n  collectionMint?: sweb3.PublicKey;\r\n  name?: string;\r\n  url?: string;\r\n  imageUrl?: string;\r\n}\r\n\r\n\r\nexport function solForTokens(tokens: TokenMetas[]) : number {\r\n  return tokens.map(t => getRedeemableLamports(t))\r\n      .reduce((prev, curr)=> {return prev + curr;}, 0) / sweb3.LAMPORTS_PER_SOL;\r\n}\r\n\r\nexport function countNFTs(tokens: TokenMetas[]): number {\r\n  if(!tokens) return 0;\r\n  return tokens.filter(t => t.masterEditionAccount).length;\r\n}\r\n\r\n\r\nexport async function findTokenAccounts(connection: sweb3.Connection, owner: sweb3.PublicKey) : Promise<TokenMetas[]> {\r\n  const response = await connection.getTokenAccountsByOwner(owner,{programId: splToken.TOKEN_PROGRAM_ID});\r\n  //console.log(response);\r\n  let id = 0;\r\n  const tokens: TokenMetas[] = [];\r\n  for (let account of response.value){\r\n      //console.log(account.pubkey.toBase58());\r\n      const offsetInBytes = 2*32;\r\n      let amount = 0;\r\n      for (let i = 0; i<8; i++){\r\n          amount += account.account.data[offsetInBytes+i] * (2**(i*8));\r\n      }\r\n      // console.log(\"found account: \"+account.pubkey.toBase58()+ \" with \"+amount);\r\n      const mint = new sweb3.PublicKey(account.account.data.slice(0, 32));\r\n      const t : TokenMetas = {\r\n          id,\r\n          tokenAccount: account.pubkey,\r\n          tokenAccountLamports: account.account.lamports,\r\n          mint: mint,\r\n          amount\r\n      };\r\n      tokens.push(t);\r\n      id++;\r\n      await populateMetadataInfo(connection,t); // eventually i want this in parallel but I don't know how to update ui properly\r\n  }\r\n  return tokens;\r\n\r\n}\r\n\r\nasync function getMetadataPDA(mint: anchor.web3.PublicKey){\r\n  const pdaInfo = await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      Buffer.from('metadata'),\r\n      TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n      mint.toBuffer(),\r\n    ],\r\n    TOKEN_METADATA_PROGRAM_ID\r\n  );\r\n  const metadataPDA = pdaInfo[0];\r\n  return metadataPDA;\r\n}\r\n\r\nasync function populateMetadataInfo(connection: sweb3.Connection, tokenMetas: TokenMetas) {\r\n  \r\n    const metadataPDA = await getMetadataPDA(tokenMetas.mint);\r\n    \r\n    const metadataAccountInfo = await connection.getAccountInfo(metadataPDA);\r\n\r\n    if(metadataAccountInfo){\r\n      tokenMetas.metadataAccount = metadataPDA; // only set if actually exists\r\n      tokenMetas.metadataAccountLamports = metadataAccountInfo.lamports;\r\n\r\n      // get name\r\n      const nameBuffer = metadataAccountInfo.data.slice(1+32+32+4, 1+32+32+4+32);\r\n      const nameLenght = metadataAccountInfo.data.readUInt32LE(1+32+32);\r\n      let name = \"\";\r\n      for (let j = 0; j< nameLenght; j++){\r\n          if (nameBuffer.readUInt8(j)===0) break;\r\n          name += String.fromCharCode(nameBuffer.readUInt8(j));\r\n      }\r\n      tokenMetas.name = name;\r\n\r\n      // get URL\r\n      const URL_OFFSET = 1+32+32+36+14;\r\n      const urlBuffer = metadataAccountInfo.data.slice(URL_OFFSET+4, URL_OFFSET+4+200);\r\n      const urlLenght = metadataAccountInfo.data.readUInt32LE(URL_OFFSET);\r\n      let extermalMetadataURI = \"\";\r\n      for (let j = 0; j< urlLenght; j++){\r\n          if (urlBuffer.readUInt8(j)===0) break;\r\n          extermalMetadataURI += String.fromCharCode(urlBuffer.readUInt8(j));\r\n      }\r\n      if(extermalMetadataURI.length>0){\r\n          tokenMetas.url = extermalMetadataURI;\r\n      }\r\n      //console.log(tokenMetas.url);\r\n\r\n      // parallel image fetching\r\n      fetchImageLink(tokenMetas);\r\n\r\n\r\n      // get collection\r\n      tokenMetas.collectionMint = getCollectionMintFromMetadataAccount(metadataAccountInfo);\r\n      if(tokenMetas.collectionMint){\r\n        tokenMetas.collectionMetadataAccount = await getMetadataPDA(tokenMetas.collectionMint);\r\n      }\r\n\r\n      // edition account\r\n      const editionPdaInfo = await anchor.web3.PublicKey.findProgramAddress(\r\n        [\r\n          Buffer.from('metadata'),\r\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n          tokenMetas.mint.toBuffer(),\r\n          Buffer.from('edition'),\r\n        ],\r\n        TOKEN_METADATA_PROGRAM_ID\r\n      );\r\n      const editionPDA = editionPdaInfo[0];\r\n      const masterEditionAccountInfo = await connection.getAccountInfo(editionPDA);\r\n      \r\n      if(masterEditionAccountInfo){\r\n        tokenMetas.masterEditionAccount = editionPDA; // only set if actually exists\r\n        tokenMetas.masterEditionAccountLamports = masterEditionAccountInfo.lamports;\r\n      }\r\n\r\n    }\r\n}\r\n\r\nfunction getCollectionMintFromMetadataAccount(metadataAccountInfo: sweb3.AccountInfo<Buffer>){\r\n\r\n    const CREATOR_OFFSET = 321;\r\n    const CREATOR_SIZE = 32+1+1;\r\n    \r\n    const creatorsPresent = metadataAccountInfo.data[CREATOR_OFFSET];\r\n    const creators = creatorsPresent?metadataAccountInfo.data[CREATOR_OFFSET+1]:0; // we just need to read first of 4 bytes since creator length is max 5\r\n    //console.log(\"number of creators: \"+creators);\r\n\r\n    const enOffset = CREATOR_OFFSET+1+(creatorsPresent?4+CREATOR_SIZE*creators:0)+2;\r\n    const editionNoncePresent = metadataAccountInfo.data[enOffset];\r\n    // console.log(\"nonce present \"+editionNoncePresent);\r\n    const tsOffset = enOffset+(editionNoncePresent?2:1);\r\n    const tokenStandardPresent = metadataAccountInfo.data[tsOffset];\r\n    // console.log(\"standard present \"+tokenStandardPresent);\r\n    \r\n    const collectionOffset = tsOffset+(tokenStandardPresent?2:1);\r\n    const collectionPresent = metadataAccountInfo.data[collectionOffset];\r\n    if(!collectionPresent) return undefined;\r\n    const verifiedCollection = metadataAccountInfo.data[collectionOffset+1];\r\n    const collectionMint = new sweb3.PublicKey(metadataAccountInfo.data.slice(collectionOffset+2,collectionOffset+2+32));\r\n    // const updateAuthority = new sweb3.PublicKey(metadataAccountInfo.data.slice(1,33));\r\n    // const creatorOne = new sweb3.PublicKey(metadataAccountInfo.data.slice(CREATOR_OFFSET+1+4,CREATOR_OFFSET+1+4+32));\r\n    // console.log(\"verified \"+verifiedCollection);\r\n    // console.log(\"collection mint \"+collectionMint.toBase58());\r\n    // console.log(\"update authority \"+updateAuthority.toBase58());\r\n    // console.log(\"creator 1 \"+creatorOne.toBase58());\r\n    // console.log(\"symbol \"+metadataAccountInfo.data[101]);\r\n\r\n    if(verifiedCollection){\r\n      return collectionMint;\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nasync function fetchImageLink(token: TokenMetas){\r\n  if(!token.url) return;\r\n  \r\n  const response = await fetch(token.url, {method: 'GET'});\r\n  const data = await response.json();\r\n  if(data[\"image\"]){\r\n    //console.log(\"external metadata: \"+data[\"name\"]+\" \"+data[\"image\"]);\r\n    token.imageUrl = data[\"image\"];\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n\r\nexport function getSelectedTokens(tokens: TokenMetas[], selectionModel?: GridSelectionModel): TokenMetas[] {\r\n    return tokens.filter(t => selectionModel?selectionModel.includes(t.id):true);\r\n}\r\n"],"sourceRoot":""}